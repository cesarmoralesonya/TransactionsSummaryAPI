name: CI
on:
  push:
    branches:
      - master
jobs:
  build:
    name: Build & analyze
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SOLUTION_PATH: TransactionsSummaryApi.sln 
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"cesarmoralesonya_TransactionsSummaryAPI" /o:"moralescorp" /d:sonar.cs.opencover.reportsPaths="**\coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**\*.trx" /d:sonar.coverage.exclusions="**Test**" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build "${{env.SOLUTION_PATH}}"
      - name: Test
        shell: powershell
        run: |
          dotnet test "${{env.SOLUTION_PATH}}" /p:CollectCoverage=true /p:CoverletOutputFormat=OpenCover --logger trx
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          dotnet clean "${{env.SOLUTION_PATH}}"
  docker:
    name: Docker build and push
    needs: [build]
    if: success()
    runs-on: ubuntu-latest
    steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%d')"
        - name: Checkout
          uses: actions/checkout@v2
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        - name: Build and push
          uses: docker/build-push-action@v2
          with:
            file: ./src/Api/Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/transactionsapi:latest-${{ steps.date.outputs.date }}${{ github.run_number }}
  deploy:
        name: Deploy to Azure
        needs: [docker]
        if: success()
        runs-on: ubuntu-latest
        steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%d')"
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        - name: 'Deploy to Azure Container Instances'
          uses: 'azure/aci-deploy@v1'
          with:
            resource-group: ${{ secrets.RESOURCE_GROUP }}
            dns-name-label: transactions-summaryapi
            image: ${{ secrets.DOCKERHUB_USERNAME }}/transactionsapi:latest-${{ steps.date.outputs.date }}${{ github.run_number }}
            name: transactions-summaryapi
            location: 'west us'
